package 方法的重写覆盖;
/*
在父子类的继承关系当中，创建子类对象，访问成员方法的规则：
    创建的对象是谁，就优先使用谁，如果没有则向上找
注意：不论是成员方法还是成员方法，如果没有都是向上找父类，据对不会向下找子类

方法的重写（覆盖）（Override）
概念：在继承关系中，方法的名称一样，参数列表也一样

重写（Override）：方法的名称一样，参数列表也一样
重载（Overload）：方法的名称一样，参数列表不一样
重写特点：
创建的是子类对象，则优先用子类方法
 */

public class Demo01ExtendMethod {
    public static void main(String[] args) {
        Zi zi=new Zi();
        //父类和子类的成员方法不重名的时候
        zi.methodfu();
        zi.metodzi();
        //父类和子类的成员方法重名的时候,也就是实现了方法的覆盖重写，相当于子类看不上父类的成员方法，并对其进行了一次更新，更新时注意有规则限制
        //详见demo04
        zi.method();//子类重名方法执行
    }
}
